---
title: "Example RNA-seq Analysis"
subtitle: "Differential Gene Expression"
author: "Lachlan Baer"
date-modified: today
date-format: "DD MMMM, YYYY"
modified-title: "LAST MODIFIED"
code-fold: true
fig-width: 8
fig-height: 6
fig-align: center
editor_options:
  chunk_output_type: console
---

```{r knitr_opts, include = FALSE}
## Default chunk options
knitr::opts_chunk$set(
    echo = TRUE,
    message = FALSE,
    warning = FALSE,
    error = FALSE,
    fig.align = "center"
)
## Enable auto-completion of file paths from the project root
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
```

# Introduction

This document outlines the steps to perform a differential expression analysis at the gene-level, with explanations of code and methods throughout.
You may notice that this file has the `.qmd` extension, specifying it as a Quarto document.
This can be considered as the "next generation" of R Markdown.
At it's core, Quarto works the same way as R Markdown.
However, Quarto provides some further functionality that can be very useful.
Code chunks and text from R Markdown documents can be transferred to Quarto documents and will simply just work.

Quarto/R Markdown provides an authoring framework for data science.
In a single document, the user can place code chunks between text which gets executed when generating the report.
This enables analyses that can easily be turned into high quality reports to share with an audience.
It is even possible to insert inline code, allowing the values of variables to be reported within a paragraph of text.
For example, let's use a code chunk to generate a random number sampled from a normal distribution with mean of 0 and standard deviation of 1, and assign it to the variable `random_normal`:

```{r random_normal}
random_normal <- rnorm(n = 1, mean = 0, sd = 1)
```

We can now use this variable to report our result: The randomly sampled number was `r random_normal`.
You will notice each time you generate a report from the document, this number will change.

You may also notice that code chunks have a chunk header, which default to `{r}`.
Here I have labelled this code chunk, which is best practice but completely optional.
Naming code chunks is handy for debugging, and incredibly useful when a chunk outputs a plot.
Quarto places the generated plot as a `.png` with the chunk name in a convenient location.
This saves the hassle of writing code to save a figure, in order to share with colleagues, insert into a presentation, etc.

There is plenty more you can do with Quarto.
[Here](https://quarto.org/docs/guide/) you will find the Quartio documentation.
You can also access the R Markdown documentation [here](https://rmarkdown.rstudio.com/lesson-1.html).

# Setup

## Installing Bioconductor and R packages

Bioconductor is an open source project that provides tools and software packages for the analysis and interpretation of high-throughput genomic data.
If Bioconductor is not already installed on your system, follow the installation instructions on the [Bioconductor website](https://www.bioconductor.org/install/), which will always stay up to date.
At the time of writing this document, Bioconductor was in version `3.20` of the release cycle, which can be installed as follows:

```{r install_bioc, eval=FALSE}
if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install(version = "3.20")
```

If Bioconductor was successfully installed, you will have access to the `BiocManager` package.
Using `BiocManager` is the recommended way to install any additional packages.

Note that in the above code chunk I have added a chunk option to the chunk header (`eval=FALSE`).
This specifies that that code chunk will not be executed when a report is generated.

## Load libraries

The first step in any analysis is to load packages into the environment, allowing easy access to functions required for the analysis.

```{r}
## Common packages
library(tidyverse)
library(magrittr)
library(here)
library(kableExtra)
library(RColorBrewer)
library(ggpubr)
library(scales)
library(AnnotationHub)
library(ggrepel)
library(ggtext)
library(glue)
library(pander)
library(DT)
library(reactable)
library(htmltools)
## Document-specific packages
library(edgeR)
library(limma)
library(cqn)
library(pheatmap)
library(corrplot)
```

Running the above code chunk will likely error due to packages not being installed on your system.
For any packages that require installation, use the RStudio console to install them, e.g. `BiocManager::install("tidyverse")`.

Now we set up any further options as desired for the document.

```{r opts}
## Set the ggplot2 theme
theme_set(theme_bw())
## Allow markdown formatting of title and axis labels with the ggtext package
theme_update(
    title = element_markdown(),
    axis.title.x = element_markdown(),
    axis.title.y = element_markdown()
)
```

# Metadata

